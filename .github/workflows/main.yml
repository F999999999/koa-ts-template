# 工作流名称（默认值：配置文件名）
name: GitHub Actions Deploy koa-serve main

# 指定触发 工作流（workflow）的条件
# 指定触发事件时，可以限定分支或标签
on:
  # 当触发 push 事件时执行工作流任务
  push:
    # 当分支是 main 时执行工作流任务
    branches:
      - main

# 工作流任务
jobs:
  # 任务名称
  build:
    # 任务运行的容器类型（虚拟机环境）
    runs-on: ubuntu-latest

    # 判断在指定用户或者组织的指定仓库中才执行
    if: github.repository == 'F999999999/仓库名称'
    # 判断在指定用户或者组织中才执行
    # if: github.repository_owner == '用户名或者组织名'

    # 指定任务执行的命令
    steps:
      # 拉取代码
      - name: Checkout 🛎️
        uses: actions/checkout@v2
        with:
          # 是否在git config 中持久化 token（默认值：true）
          persist-credentials: false

      # 设置 node 环境变量
      - name: Setup Node.js ⚙
        uses: actions/setup-node@v1
        with:
          # 需要使用的 node 版本
          node-version: 16

      # 获取缓存路径
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # 缓存 yarn
      - name: Cache yarn cache 💾
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          # 需要缓存的文件、目录和通配符模式列表
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          # 用于恢复和保存缓存的显式密钥
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          # 如果键没有发生缓存命中，则用于恢复缓存的键的显式密钥
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 缓存依赖文件
      - name: Cache node_modules 💾
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          # 需要缓存的文件、目录和通配符模式列表
          path: node_modules
          # 用于恢复和保存缓存的显式密钥
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          # 如果键没有发生缓存命中，则用于恢复缓存的键的显式密钥
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      # 安装依赖
      - name: Install dependencies 🔧
        # 判断缓存是否命中
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        # 如果没有命中，则安装依赖
        run: yarn

      # 打包并压缩
      - name: Packaging 📦
        run: tar czvf release.tar.gz *

      # 上传到服务器
      - name: Deploy 🚀
        # 构建
        uses: easingthemes/ssh-deploy@v2.1.5
        # 该步骤所需的环境变量
        env:
          # 服务器地址(IP或者域名)
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          # 服务器用户名
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          # 服务器 SSH 私钥
          SSH_PRIVATE_KEY: ${{ secrets.REMOTE_SSH_KEY }}
          # 服务器部署路径
          TARGET: ${{ secrets.REMOTE_TARGET }}
          # 源目录（打包的目录或文件）
          SOURCE: "release.tar.gz"
          # rsync flags（默认值："-rltgoDzvO"）
          # --delete 删除那些目标目录中有而源目录中没有的多余文件
          # --exclude 排除目标目录中那些被该选项指定的文件
          ARGS: "-rltgoDzvO --delete --exclude '.env'"

      # 部署服务器
      - name: Deploy 🎉
        # 构建
        uses: appleboy/ssh-action@master
        with:
          # 服务器地址(IP或者域名)
          host: ${{ secrets.REMOTE_HOST }}
          # 服务器用户名
          username: ${{ secrets.REMOTE_USER }}
          # 服务器 SSH 私钥
          key: ${{ secrets.REMOTE_SSH_KEY }}
          # 运行在远程服务器的命令
          # 临时添加node/bin目录到环境变量
          # 切换到部署目录
          # 开启 extglob
          # 删除旧文件
          # 解压压缩包
          # 重载PM2
          # 执行清理操作
          script: |
            export PATH=$PATH:${{ secrets.REMOTE_PATH }}
            cd ${{ secrets.REMOTE_TARGET }}
            shopt -s extglob
            rm -rf !(release.tar.gz|.env)
            tar xzf release.tar.gz
            pm2 reload ecosystem.config.js
            rm -rf release.tar.gz